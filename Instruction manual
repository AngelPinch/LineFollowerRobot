## Ανάλυση Κώδικα Ρομπότ Ακολουθητή Γραμμής

### 1. Σταθερές (Constants) - Γραμμές 5-17
Αυτές οι γραμμές ορίζουν διάφορες σταθερές που χρησιμοποιούνται σε όλο το πρόγραμμα.

*   `MOTOR_LEFT_IN1_PIN`, `MOTOR_LEFT_IN2_PIN`, `MOTOR_RIGHT_IN1_PIN`, `MOTOR_RIGHT_IN2_PIN`: Ακροδέκτες GPIO για τους οδηγούς κινητήρων.
*   `BUZZER_GPIO_PIN`: Ακροδέκτης GPIO για τον βομβητή.
*   `SPI_BUS_ID`, `SPI_SCK_PIN_ID`, `SPI_MOSI_PIN_ID`, `SPI_MISO_PIN_ID`, `SPI_CS_GPIO_NUM`: Παράμετροι για την επικοινωνία SPI με τον ADC MCP3008.
*   `NUM_SENSORS`: Αριθμός αισθητήρων γραμμής (π.χ., 5).
*   `SENSOR_MCP_CHANNELS`: Λίστα αντιστοίχισης αισθητήρων σε κανάλια του MCP3008.
*   `KP`, `KI`, `KD`: Συντελεστές για τον ελεγκτή PID.
*   `BASE_SPEED`: Βασική ταχύτητα κινητήρων (0-100).
*   `PWM_FREQ`, `MAX_PWM_DUTY`: Παράμετροι PWM (συχνότητα και μέγιστος κύκλος λειτουργίας).
*   `CALIBRATION_FILENAME`: Όνομα αρχείου για αποθήκευση δεδομένων βαθμονόμησης.

### 2. Καθολικές Μεταβλητές (Global Variables) - Γραμμές 18-21
Μεταβλητές προσβάσιμες από όλο το πρόγραμμα.

*   `sensor_min_readings`: Λίστα για ελάχιστες τιμές αισθητήρων (μαύρο).
*   `sensor_max_readings`: Λίστα για μέγιστες τιμές αισθητήρων (λευκό).
*   `last_error`: Αποθηκεύει το προηγούμενο σφάλμα PID.
*   `integral`: Αποθηκεύει το συσσωρευμένο σφάλμα PID.
*   `long_beep_timer`: Αντικείμενο `Timer` για τον βομβητή.

### 3. Αρχικοποίηση Αντικειμένων Υλικού (Hardware Object Initialization) - Γραμμές 23-31
Δημιουργία αντικειμένων για την αλληλεπίδραση με το υλικό.

*   `pwm_left_in1`, `pwm_left_in2`, `pwm_right_in1`, `pwm_right_in2`: Αντικείμενα `PWM` για τον έλεγχο των δύο κινητήρων.
*   `spi_bus_obj`: Αντικείμενο `SPI` για την επικοινωνία με τον MCP3008.
*   `cs_pin_obj`: Αντικείμενο `Pin` για το Chip Select (CS) του MCP3008.
*   `adc`: Αντικείμενο `mcp3008.MCP3008` για ανάγνωση τιμών από τους αισθητήρες.
*   `buzzer_pwm`: Αντικείμενο `PWM` για τον βομβητή.

### 4. Συναρτήσεις (Functions)

#### `set_motor_speed(in1_pwm, in2_pwm, speed_percent)`:
*   Ορίζει την ταχύτητα και την κατεύθυνση ενός κινητήρα.
*   Παίρνει ως ορίσματα τα δύο αντικείμενα `PWM` που ελέγχουν τον κινητήρα και μια ποσοστιαία ταχύτητα (`speed_percent`) από -100 (πλήρης ταχύτητα προς τα πίσω) έως 100 (πλήρης ταχύτητα προς τα εμπρός).
*   Μετατρέπει το ποσοστό ταχύτητας σε τιμή κύκλου λειτουργίας PWM (`duty`).
*   Αν `speed_percent > 0`, ο κινητήρας κινείται εμπρός (το `in1_pwm` ενεργοποιείται, το `in2_pwm` μηδενίζεται).
*   Αν `speed_percent < 0`, ο κινητήρας κινείται προς τα πίσω (το `in1_pwm` μηδενίζεται, το `in2_pwm` ενεργοποιείται).
*   Αν `speed_percent == 0`, ο κινητήρας σταματά (και τα δύο `PWM` μηδενίζονται).

#### `stop_motors(brake=False, brake_duration_ms=50, brake_power_percent=30)`:
*   Σταματά και τους δύο κινητήρες.
*   Αν η παράμετρος `brake` είναι `True`, εφαρμόζει ένα σύντομο "φρενάρισμα" κινούμενος τους κινητήρες στιγμιαία προς την αντίθετη κατεύθυνση (`-abs(brake_power_percent)`) για `brake_duration_ms` χιλιοστά του δευτερολέπτου, πριν τους σταματήσει τελείως.
*   Τελικά, καλεί την `set_motor_speed` για να μηδενίσει την ταχύτητα και των δύο κινητήρων.

#### `read_raw_sensor_values()`:
*   Διαβάζει τις ακατέργαστες (raw) τιμές από όλους τους αισθητήρες γραμμής.
*   Χρησιμοποιεί τη μέθοδο `adc.read()` για κάθε κανάλι του MCP3008 που αντιστοιχεί σε αισθητήρα (σύμφωνα με τη λίστα `SENSOR_MCP_CHANNELS`).
*   Επιστρέφει μια λίστα με τις ακατέργαστες τιμές (0-1023).

#### `get_normalized_sensor_values()`:
*   Παίρνει τις ακατέργαστες τιμές από την `read_raw_sensor_values()`.
*   Κανονικοποιεί αυτές τις τιμές σε ένα εύρος από 0.0 έως 1.0, χρησιμοποιώντας τις τιμές βαθμονόμησης `sensor_min_readings` (για μαύρο) και `sensor_max_readings` (για λευκό).
*   Η κανονικοποίηση γίνεται έτσι ώστε η τιμή `1.0` να αντιστοιχεί περίπου σε μαύρο (έντονη αντανάκλαση από τη γραμμή) και η τιμή `0.0` σε λευκό.
*   Περιλαμβάνει λογική για την περίπτωση που η διαφορά μεταξύ min και max είναι πολύ μικρή.
*   Επιστρέφει τόσο τις ακατέργαστες όσο και τις κανονικοποιημένες τιμές.

#### `save_calibration_data(min_b, max_w)`:
*   Αποθηκεύει τις τιμές βαθμονόμησης (ελάχιστες για μαύρο, μέγιστες για λευκό) σε ένα αρχείο JSON (`CALIBRATION_FILENAME`).
*   Χρησιμοποιεί τη βιβλιοθήκη `ujson` για τη σειριοποίηση των δεδομένων.
*   Περιλαμβάνει χειρισμό σφαλμάτων σε περίπτωση που η αποθήκευση αποτύχει.

#### `load_calibration_data()`:
*   Προσπαθεί να φορτώσει τα δεδομένα βαθμονόμησης από το αρχείο JSON.
*   Χρησιμοποιεί τη βιβλιοθήκη `ujson` για την αποσειριοποίηση.
*   Ελέγχει αν τα φορτωμένα δεδομένα έχουν τη σωστή μορφή και αν ο αριθμός των τιμών ταιριάζει με το `NUM_SENSORS`.
*   Αν η φόρτωση είναι επιτυχής και τα δεδομένα έγκυρα, ενημερώνει τις καθολικές μεταβλητές `sensor_min_readings` και `sensor_max_readings` και επιστρέφει `True`.
*   Σε περίπτωση σφάλματος (π.χ., το αρχείο δεν υπάρχει, τα δεδομένα είναι κατεστραμμένα), εκτυπώνει ένα μήνυμα και επιστρέφει `False`.

#### `perform_interactive_calibration(duration_sec=20)`:
*   Εκτελεί μια διαδικασία διαδραστικής βαθμονόμησης των αισθητήρων.
*   Για μια καθορισμένη διάρκεια (`duration_sec`), διαβάζει συνεχώς τις τιμές των αισθητήρων.
*   Καταγράφει τις ελάχιστες (`min_b_cal`) και μέγιστες (`max_w_cal`) τιμές που ανιχνεύει κάθε αισθητήρας κατά τη διάρκεια αυτής της περιόδου (υποτίθεται ότι ο χρήστης κινεί το ρομπότ πάνω από μαύρες και λευκές επιφάνειες).
*   Μετά τη λήξη του χρόνου, ενημερώνει τις καθολικές μεταβλητές `sensor_min_readings` και `sensor_max_readings` με τις τιμές που καταγράφηκαν.
*   Παίζει έναν ήχο (δύο μπιπ) από τον βομβητή για να σηματοδοτήσει το τέλος της βαθμονόμησης.
*   Εκτυπώνει προειδοποιήσεις αν για κάποιον αισθητήρα η μέγιστη τιμή είναι μικρότερη ή ίση της ελάχιστης (ένδειξη προβληματικής βαθμονόμησης).
*   Αποθηκεύει τα νέα δεδομένα βαθμονόμησης χρησιμοποιώντας την `save_calibration_data()`.

#### `calculate_line_position(norm_sensor_values)`:
*   Υπολογίζει τη θέση της γραμμής σε σχέση με το κέντρο του ρομπότ, χρησιμοποιώντας τις κανονικοποιημένες τιμές των αισθητήρων.
*   Χρησιμοποιεί μια λίστα "βαρών" (`weights = [-2, -1, 0, 1, 2]`). Οι ακριανοί αισθητήρες έχουν μεγαλύτερο βάρος.
*   Υπολογίζει έναν σταθμισμένο μέσο όρο: `(άθροισμα(βάρος[i] * τιμή_αισθητήρα[i])) / (άθροισμα(τιμή_αισθητήρα[i]))`.
*   Η τιμή που επιστρέφεται είναι το "σφάλμα" (`error`):
    *   Μια τιμή κοντά στο `0` σημαίνει ότι η γραμμή είναι στο κέντρο.
    *   Μια αρνητική τιμή σημαίνει ότι η γραμμή είναι αριστερά.
    *   Μια θετική τιμή σημαίνει ότι η γραμμή είναι δεξιά.
*   Αν κανένας αισθητήρας δεν ανιχνεύει έντονα τη γραμμή, προσπαθεί να "μαντέψει" τη θέση της γραμμής με βάση το προηγούμενο σφάλμα (`last_error`), για να βοηθήσει το ρομπότ να ξαναβρεί τη γραμμή αν την χάσει.

#### `turn_off_long_beep_cb(timer_object_passed_in)`:
*   Μια συνάρτηση επανάκλησης (callback) που προορίζεται να χρησιμοποιηθεί από ένα αντικείμενο `Timer`.
*   Απενεργοποιεί τον βομβητή (`buzzer_pwm`) θέτοντας τον κύκλο λειτουργίας του PWM του σε `0`.

#### `play_f1_start_sound()`:
*   Παίζει μια ακολουθία ήχων που μιμείται την αντίστροφη μέτρηση και την εκκίνηση ενός αγώνα Formula 1.
*   Χρησιμοποιεί τον `buzzer_pwm` για να παράγει τους ήχους, αλλάζοντας τη συχνότητα και τον κύκλο λειτουργίας.
*   Για τον τελευταίο, παρατεταμένο ήχο, χρησιμοποιεί ένα αντικείμενο `Timer` (`long_beep_timer`) για να καλέσει την `turn_off_long_beep_cb` μετά από συγκεκριμένο χρονικό διάστημα, ώστε ο ήχος να σταματήσει αυτόματα.

#### `main_loop()`:
*   Αυτή είναι η κύρια συνάρτηση που εκτελεί τη λογική του ρομπότ που ακολουθεί τη γραμμή.
*   Πρώτα, προσπαθεί να φορτώσει δεδομένα βαθμονόμησης. Αν δεν υπάρχουν έγκυρα δεδομένα, εκτελεί την `perform_interactive_calibration()`.
*   Παίζει τον ήχο εκκίνησης (`play_f1_start_sound()`).
*   Περιμένει λίγο να τελειώσει ο ήχος.
*   Μπαίνει σε έναν ατέρμονα βρόχο (`while True`) μέσα σε ένα μπλοκ `try...finally`:
    *   **Μέσα στον βρόχο:**
        1.  Διαβάζει και κανονικοποιεί τις τιμές των αισθητήρων (`get_normalized_sensor_values()`).
        2.  Ελέγχει αν όλοι οι αισθητήρες ανιχνεύουν μαύρο (`all_sensors_on_black`). Αν ναι (π.χ., έφτασε σε μια μεγάλη μαύρη περιοχή ή στο τέλος της γραμμής), σταματά τους κινητήρες με φρενάρισμα και βγαίνει από τον βρόχο.
        3.  Υπολογίζει τη θέση της γραμμής / το σφάλμα (`calculate_line_position()`).
        4.  **Εφαρμόζει τον αλγόριθμο PID:**
            *   `p_term = KP * error` (Αναλογικός όρος)
            *   `integral += error` (Συσσωρεύει το σφάλμα)
            *   Περιορίζει την τιμή του `integral` (anti-windup).
            *   `i_term = KI * integral` (Ολοκληρωτικός όρος)
            *   `derivative = error - last_error` (Υπολογίζει την αλλαγή στο σφάλμα)
            *   `d_term = KD * derivative` (Παραγωγικός όρος)
            *   `last_error = error` (Αποθηκεύει το τρέχον σφάλμα για την επόμενη επανάληψη)
            *   `correction = p_term + i_term + d_term` (Η συνολική διόρθωση που πρέπει να εφαρμοστεί στην ταχύτητα των κινητήρων).
        5.  Υπολογίζει την επιθυμητή ταχύτητα για τον αριστερό και τον δεξιό κινητήρα (`left_speed_command`, `right_speed_command`) προσθέτοντας/αφαιρώντας τη `correction` από τη `BASE_SPEED`.
        6.  Περιορίζει τις τιμές ταχύτητας των κινητήρων στο εύρος `[-100, 100]`.
        7.  Ορίζει τις νέες ταχύτητες στους κινητήρες χρησιμοποιώντας την `set_motor_speed()`.
    *   **`except KeyboardInterrupt`:** Αν ο χρήστης πατήσει `Ctrl+C`, εκτυπώνει ένα μήνυμα και το πρόγραμμα θα προχωρήσει στο `finally`.
    *   **`finally`:** Αυτό το μπλοκ εκτελείται πάντα, είτε ο βρόχος τερματιστεί κανονικά, είτε λόγω εξαίρεσης (όπως `KeyboardInterrupt`).
        1.  Σταματά τους κινητήρες με φρενάρισμα.
        2.  Απενεργοποιεί τον βομβητή.
        3.  Απενεργοποιεί τον χρονοδιακόπτη `long_beep_timer` αν είχε δημιουργηθεί.

### 5. Κύρια Εκτέλεση - Γραμμές 184-185
*   `if __name__ == "__main__":`
    *   Εξασφαλίζει ότι η `main_loop()` καλείται μόνο όταν το αρχείο εκτελείται απευθείας.
*   `main_loop()`
    *   Καλεί την κύρια συνάρτηση για να ξεκινήσει η λειτουργία του ρομπότ.
